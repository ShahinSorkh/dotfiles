#!/usr/bin/env bash
# a php version manager
#
# @todo quiet mode with log files
# @todo handling configure options
# @todo check deps before starting

set -euo pipefail

phpvm_path="$HOME/.phpvm"
old_rels_cache_path="$phpvm_path/tmp/old_releases.html"
rels_cache_path="$phpvm_path/tmp/releases.html"
downloads_path="$phpvm_path/tmp"

usage() {
    echo "Usage: phpvm cmd"
    echo ""
    echo "Commands:"
    echo -e "\thelp\t\tshow this"
    echo -e "\tls\t\tlist installed php versions"
    echo -e "\tls-remote\tlist remote php versions"
    echo -e "\tinstall version\tinstalls a remote php version"
    echo -e "\tbin\t\tget bin path for an install"
    echo -e "\tremove version\tremoves a php version"
    echo -e "\tuse version\tuses a php version"
    echo ""
    echo "Examples:"
    echo -e "\tphpvm install 7.0.4"
    echo -e "\t\$(phpvm bin 7.0.4)/php --version"
    echo -e "\t\$(phpvm bin 7.0.4)/composer --version"
}

deps() {
    echo "libxml2-dev"
}

dir_setup() {
    mkdir -p ~/.phpvm
    mkdir -p ~/.phpvm/tmp
}

ls_remote__get_releases() {
    wget -qO- 'http://php.net/releases/' > $old_rels_cache_path
    wget -qO- 'http://php.net/downloads.php' > $rels_cache_path
    return 0
}

ls_remote__versions() {
    local old_versions="$(cat $old_rels_cache_path| grep -o -e '[0-9]\+\.[0-9]\+\.[0-9]\+' | sort | uniq)"
    local new_versions="$(cat $rels_cache_path | grep -o -e '[0-9]\+\.[0-9]\+\.[0-9]\+' | sort | uniq)"
    echo "$old_versions"
    echo "$new_versions"
    return 0;
}

ls_local() {
    # installed means bin was linked
    echo "Locally installed"
    for dir in $phpvm_path/installs/*
    do
        if [ -f "$dir/bin/php" ]
        then
            echo "$(basename "$dir")"
        fi
    done
}

ls_remote() {
    local cache_time=$((60*15))
    #local cache_time=0 # for debug

    if [ -f "$old_rels_cache_path" ]
    then
        local last_mod_time=$(stat "$old_rels_cache_path" -c %Y)
        local cur_time=$(date +"%s")
        local time_diff=$(($cur_time - $last_mod_time))
        if [ "$time_diff" -gt "$cache_time" ]
        then
            ls_remote__get_releases
        fi
    else
        ls_remote__get_releases
    fi

    local old_versions="$(cat $old_rels_cache_path| grep -o -e '[0-9]\+\.[0-9]\+\.[0-9]\+' | sort | uniq)"
    local new_versions="$(cat $rels_cache_path | grep -o -e '[0-9]\+\.[0-9]\+\.[0-9]\+' | sort | uniq)"
    echo "Old versions:"
    echo "$old_versions"
    echo ""
    echo "Stable versions:"
    echo "$new_versions"
}

install_composer() {
    local php_bin="$1"
    local install_path="$2"
    local installed_path="$install_path/composer.phar"

    if [ ! -f "$php_bin" ]
    then
        echo "$php_bin php bin not found"
        return 1
    fi

    if [ ! -d "$install_path" ]
    then
        echo "$install_path install path not found"
        return 1
    fi

    if [ ! -f "$installed_path" ]
    then
        EXPECTED_CHECKSUM="$($php_bin -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
        $php_bin -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        ACTUAL_CHECKSUM="$($php_bin -r "echo hash_file('sha384', 'composer-setup.php');")"

        if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
        then
            >&2 echo 'ERROR: Invalid installer checksum'
            rm composer-setup.php
            exit 1
        fi

        $php_bin composer-setup.php --quiet --install-dir="$install_path"
        rm composer-setup.php
    fi

    echo "#!/usr/bin/env sh
$php_bin \"$install_path/composer.phar\" \$*
" > "$install_path/composer"

    chmod +x "$install_path/composer"

    return 0
}

test_full_version() {
    local version="$1"
    if echo "$version" | grep -q -e '[0-9]\+\.[0-9]\+\.[0-9]\+'
    then
        return 0
    fi

    return 1
}

get_version_dir() {
    local version="$1"
    echo "$phpvm_path/installs/$version"
    return 0
}

get_tar_url() {
    local version="$1"
    echo "http://php.net/get/php-$version.tar.bz2/from/this/mirror"
}

install() {
    local version="$2"
    # @todo
    local configure_string="${3:-}"

    # init cache files
    ls_remote > /dev/null

    # search for version
    local versions="$(ls_remote__versions)"
    if test_full_version "$version"
    then
        echo "$version OK format"
    else
        echo "A full version not specified"
        return 1
    fi

    if echo "$versions" | grep -q -e "$version"
    then
        echo "$version in available versions"
    else
        echo "$version not in available versions, try again"
    fi

    echo "Starting install"

    local install_dir="$(get_version_dir "$version")"

    echo "Install dir: $install_dir"

    local install_src_dir="$(get_version_dir "$version")/src"

    local tar_url="$(get_tar_url "$version")"
    local tar_file="php-${version}.tar.bz2"
    local tar_path="$downloads_path/$tar_file"

    if [ ! -f "$tar_path" ]
    then
        echo "Getting: $tar_url saving to $tar_file"
        wget -O "$tar_path" "$tar_url"
    fi


    if [ ! -f "$tar_path" ]
    then
        echo "Cannot find $tar_path, check download"
        return 1
    fi

    mkdir -p "$install_src_dir"

    local extracted_dir="$install_src_dir/php-$version"

    # @todo don't necessarily know extracted dir pattern
    if [ -d "$extracted_dir" ]
    then
        echo "Extracted dir exists: $extracted_dir"
    else
        tar -xvf "$tar_path" -C "$install_src_dir"
    fi

    cd "$extracted_dir"

    install_etc_dir="$install_dir/etc/php.conf.d"
    mkdir -p "$install_etc_dir"
    ./configure \
        --with-config-file-path="$install_dir/etc" \
        --with-config-file-scan-dir="$install_etc_dir" \
        --enable-bcmath \
        --enable-calendar \
        --enable-embed \
        --enable-exif \
        --enable-fpm \
        --enable-ftp \
        --enable-gd \
        --enable-intl \
        --enable-litespeed \
        --enable-mbstring \
        --enable-soap \
        --enable-sockets \
        --with-curl \
        --with-freetype \
        --with-gettext \
        --with-jpeg \
        --with-kerberos \
        --with-mhash \
        --with-mysqli=mysqlnd \
        --with-openssl \
        --with-pdo-mysql=mysqlnd \
        --with-pear \
        --with-readline \
        --with-webp \
        --with-xsl \
        --with-zlib \
        "$configure_string"
    make -j $(nproc)

    # link bins
    local install_bin_path="$install_dir/bin"
    mkdir -p "$install_bin_path"

    ln -sf $extracted_dir/sapi/cli/php $install_bin_path/php
    install_composer "$install_bin_path/php" "$install_bin_path"

    echo "php --version"
    "$install_bin_path/php" --version
    echo "composer --version"
    "$install_bin_path/composer" --version

    echo "Installation complete"
    return 0;
}

bin_path() {
    local version="$2"
    local version_dir="$(get_version_dir "$version")"
    local bin_dir="$version_dir/bin"

    if [ ! -d "$bin_dir" ]
    then
        echo "No bin dir found"
        exit 1
    fi

    echo "$bin_dir"
    return 0
}

remove() {
    let version="$2"
    let version_dir="$(get_version_dir "$version")"

    if [ -d "$version_dir" ]
    then
        rm -rf "$version_dir"
    fi

    echo "Removed $version at $version_dir"
}

switch_version () {
    version=$2
    current="$(bin_path '' $version)"
    ln -sf "$current" ~/.phpvm/current
    echo "switched to $current"
}

run_php () {
    shift
    ~/.phpvm/current/php $*
}

run_composer () {
    shift
    ~/.phpvm/current/composer $*
}

dir_setup
case "${1:-}" in
    help)
        usage
        exit 0
        ;;
    bin)
        bin_path "$@"
        exit 0
        ;;
    ls)
        ls_local "$@"
        exit 0
        ;;
    ls-remote)
        ls_remote
        exit 0;
        ;;
    remove)
        remove "$@"
        exit 0;
        ;;
    install)
        install "$@"
        exit 0;
        ;;
    use)
        switch_version "$@"
        exit 0;
        ;;
    composer)
        run_composer "$@"
        exit 0;
        ;;
    php)
        run_php "$@"
        exit 0;
        ;;
    *)
        usage
        exit 0
        ;;
esac
