#!/usr/bin/env bash

set -euo pipefail

# Configuration
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/phpvm"
mkdir -p "$cache_dir"
rels_cache_path="$cache_dir/releases"
old_rels_cache_path="$cache_dir/releases_old"

data_dir="${XDG_DATA_HOME:-$HOME/.local/share/phpvm}"
install_base_dir="$data_dir/versions"
current_link="$data_dir/current"

quiet=0
verbose=0

log() {
  local level=$1; shift
  if (( quiet )); then
    [[ "$level" == "ERROR" ]] && echo "ERROR: $*" >&2
    return
  fi
  if (( verbose )); then
    echo "$level: $*"
  else
    [[ "$level" == "ERROR" || "$level" == "INFO" ]] && echo "$*" || true
  fi
}

usage() {
  cat <<EOF
Usage: phpvm [--quiet|--verbose] <command> [args]

Commands:
  help             Show this message
  ls               List installed PHP versions
  ls-remote        List available remote PHP versions
  install <ver>    Install a specific PHP version (builds from source)
  remove <ver>     Remove an installed PHP version
  use <ver>        Switch to a given PHP version
  bin <ver>        Show bin path for an install
  php [args]       Run 'php' in the context of current version
  composer [args]  Run 'composer' in the context of current version
  run <exec> [...] Run any executable from the current version

Flags:
  -q, --quiet      Suppress non-error output
  -v, --verbose    Enable debug output

Examples:
  phpvm install 7.4.20
  \$(phpvm bin 7.4.20)/php --version
  phpvm run phpstan analyse
EOF
}

get_remote_versions() {
  local old_versions new_versions
  if [[ -f "$old_rels_cache_path" ]]; then
    old_versions=$(grep -oE '[0-9]+\.[0-9]+\.[0-9]+' "$old_rels_cache_path" | sort -Vu)
  else
    old_versions=""
  fi
  if [[ -f "$rels_cache_path" ]]; then
    new_versions=$(grep -oE '[0-9]+\.[0-9]+\.[0-9]+' "$rels_cache_path" | sort -Vu | tail -n+2)
  else
    new_versions=""
  fi
  printf "All Versions:\n%s\n\nStable Versions:\n%s\n" "$old_versions" "$new_versions"
}

fetch_releases() {
  log DEBUG "Fetching releases page..."
  if ! curl -sfSL 'http://php.net/releases/' -o $old_rels_cache_path.tmp; then
    log ERROR "Failed to fetch PHP releases page"
  else
    mv $old_rels_cache_path.tmp $old_rels_cache_path
  fi
  log DEBUG "Fetching downloads page..."
  if ! curl -sfSL 'http://php.net/downloads.php' -o $rels_cache_path.tmp; then
    log ERROR "Failed to fetch PHP downloads page"
  else
    mv $rels_cache_path.tmp $rels_cache_path
  fi
}

ls_remote() {
  local cache_max=900
  if [[ -f "$rels_cache_path" ]]; then
    local age=$(( $(date +%s) - $(stat -c %Y "$rels_cache_path") ))
    (( age > cache_max )) && fetch_releases
  else
    fetch_releases
  fi
  get_remote_versions
}

ls_local() {
  if [[ -d "$install_base_dir" ]]; then
    ls -1 "$install_base_dir" | sort -V
  else
    echo "No local PHP versions installed."
  fi
}

install() {
  local ver=$1
  local install_dir="$install_base_dir/$ver"
  local tarball_url="https://www.php.net/distributions/php-$ver.tar.gz"
  local src_versions_dir="$cache_dir/versions"

  if [[ -x "$install_dir/bin/php" ]]; then
    log ERROR "Version $ver is already installed."
    return 1
  fi

  log INFO "Installing PHP $ver..."
  mkdir -p "$src_versions_dir"
  local ver_dir="$src_versions_dir/php-$ver"

  local tarball_filename="$src_versions_dir/php-$ver.tar.gz"
  if [ ! -r "$tarball_filename" ]; then
    log INFO "Downloading $tarball_url"
    if ! curl -fSL "$tarball_url" -o $tarball_filename; then
      log ERROR "Failed to download PHP $ver source archive."
      rm -rf "$tmp_dir"
      return 1
    fi
  else
    log DEBUG "Tarball exists. Skip downloading."
  fi

  if [ ! -d "$ver_dir" ]; then
    log INFO "Extracting source..."
    tar -xf $tarball_filename -C "$src_versions_dir"
  else
    log DEBUG "Source is already extracted."
  fi

  pushd "$ver_dir"

  log INFO "Configuring build..."
  install_etc_dir="$install_dir/etc/php.conf.d"
  mkdir -p "$install_etc_dir"
  ./configure --prefix="$install_dir" \
    --disable-debug \
    --disable-cgi \
    --with-config-file-path="$install_dir/etc" \
    --with-config-file-scan-dir="$install_etc_dir" \
    --enable-bcmath \
    --enable-calendar \
    --enable-cli \
    --enable-embed \
    --enable-exif \
    --enable-fpm \
    --enable-ftp \
    --enable-gd \
    --enable-intl \
    --enable-litespeed \
    --enable-mbstring \
    --enable-soap \
    --enable-sockets \
    --with-curl \
    --with-freetype \
    --with-gettext \
    --with-jpeg \
    --with-kerberos \
    --with-mhash \
    --with-mysqli=mysqlnd \
    --with-openssl \
    --with-pdo-mysql=mysqlnd \
    --with-pear \
    --with-readline \
    --with-webp \
    --with-xsl \
    --with-zlib

  log INFO "Building PHP $ver..."
  if ((verbose)); then
    make -j"$(nproc)"
  else
    make -j"$(nproc)" >/dev/null
  fi

  log INFO "Installing PHP $ver..."
  if ((verbose)); then
    make install
  else
    make install >/dev/null
  fi

  cp php.ini* "$install_dir/etc"

  popd
  rm -rf "$ver_dir"

  log INFO "PHP $ver installed successfully at $install_dir"
}

remove() {
  local ver=$1
  local install_dir="$install_base_dir/$ver"

  if [[ ! -d "$install_dir" ]]; then
    log ERROR "Version $ver is not installed."
    return 1
  fi

  log INFO "Removing PHP $ver..."
  rm -rf "$install_dir"

  if [[ -L "$current_link" && $(readlink "$current_link") == "$install_dir" ]]; then
    rm -f "$current_link"
    log INFO "Removed active symlink for $ver"
  fi

  log INFO "PHP $ver removed."
}

switch_version() {
  local ver=$1
  local install_dir="$install_base_dir/$ver"

  if [[ ! -d "$install_dir" ]]; then
    log ERROR "Version $ver is not installed."
    return 1
  fi

  mkdir -p "$(dirname "$current_link")"

  ln -sfn "$install_dir" "$current_link"

  log INFO "Switched active PHP to $ver"
}

bin_path() {
  local ver=$1
  local path="$install_base_dir/$ver/bin"
  if [[ ! -d "$path" ]]; then
    log ERROR "Version $ver not installed or bin path missing."
    return 1
  fi
  echo "$path"
}

run_php() {
  local bin_dir
  if [[ -L "$current_link" ]]; then
    bin_dir="$current_link/bin"
  else
    log ERROR "No PHP version selected. Use 'phpvm use <version>' first."
    exit 1
  fi

  if [[ ! -x "$bin_dir/php" ]]; then
    log ERROR "php executable not found in $bin_dir"
    exit 1
  fi

  "$bin_dir/php" "$@"
}

run_composer() {
  local bin_dir
  if [[ -L "$current_link" ]]; then
    bin_dir="$current_link/bin"
  else
    log ERROR "No PHP version selected. Use 'phpvm use <version>' first."
    exit 1
  fi

  if [[ ! -x "$bin_dir/composer" ]]; then
    local php_bin="$bin_dir/php"

    log INFO "Installing composer to $bin_dir"
    EXPECTED_CHECKSUM="$(curl -fSL https://composer.github.io/installer.sig -o-)"
    curl -fSL https://getcomposer.org/installer -o "$cache_dir/composer-setup.php"
    ACTUAL_CHECKSUM="$($php_bin -r "echo hash_file('sha384', '$cache_dir/composer-setup.php');")"

    if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
    then
      log ERROR 'Invalid installer checksum'
      rm -f composer-setup.php
      exit 1
    fi

    if ((verbose)); then
      $php_bin "$cache_dir/composer-setup.php" --install-dir="$bin_dir"
    else
      $php_bin "$cache_dir/composer-setup.php" --quiet --install-dir="$bin_dir"
    fi
    rm -f composer-setup.php

    echo "#!/usr/bin/env sh
$php_bin \"$bin_dir/composer.phar\" \$*
" > "$bin_dir/composer"

    chmod +x "$bin_dir/composer"
  fi

  "$bin_dir/composer" "$@"
}

run_exec() {
  local bin_dir
  if [[ -L "$current_link" ]]; then
    bin_dir="$current_link/bin"
  else
    log ERROR "No PHP version selected. Use 'phpvm use <version>' first."
    exit 1
  fi

  local exec_name=$1
  shift

  if [[ ! -x "$bin_dir/$exec_name" ]]; then
    log ERROR "Executable '$exec_name' not found in $bin_dir"
    exit 1
  fi

  "$bin_dir/$exec_name" "$@"
}

main() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -q|--quiet)
        quiet=1
        shift
        ;;
      -v|--verbose)
        verbose=1
        shift
        ;;
      -h|--help)
        usage
        exit 0
        ;;
      -*)
        echo "Unknown option: $1"
        usage
        exit 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    usage
    exit 1
  fi

  local cmd=$1
  shift
  local cmd_args=("$@")

  case "$cmd" in
    help)
      usage
      ;;
    ls)
      ls_local
      ;;
    ls-remote)
      ls_remote
      ;;
    install)
      if [[ ${#cmd_args[@]} -ne 1 ]]; then
        log ERROR "install requires exactly one version argument."
        exit 1
      fi
      install "${cmd_args[0]}"
      ;;
    remove)
      if [[ ${#cmd_args[@]} -ne 1 ]]; then
        log ERROR "remove requires exactly one version argument."
        exit 1
      fi
      remove "${cmd_args[0]}"
      ;;
    use)
      if [[ ${#cmd_args[@]} -ne 1 ]]; then
        log ERROR "use requires exactly one version argument."
        exit 1
      fi
      switch_version "${cmd_args[0]}"
      ;;
    bin)
      if [[ ${#cmd_args[@]} -ne 1 ]]; then
        log ERROR "bin requires exactly one version argument."
        exit 1
      fi
      bin_path "${cmd_args[0]}"
      ;;
    php)
      run_php "${cmd_args[@]}"
      ;;
    composer)
      run_composer "${cmd_args[@]}"
      ;;
    run)
      if [[ ${#cmd_args[@]} -lt 1 ]]; then
        log ERROR "run requires an executable name argument."
        exit 1
      fi
      run_exec "${cmd_args[@]}"
      ;;
    *)
      log ERROR "Unknown command: $cmd"
      usage
      exit 1
      ;;
  esac
}

main "$@"

