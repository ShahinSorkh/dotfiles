* Table of contents :TOC:
- [[#personal-configurations][Personal Configurations]]
  - [[#who-am-i][Who am I]]
  - [[#email-accounts][Email accounts]]
- [[#preferences][Preferences]]
  - [[#fonts][Fonts]]
  - [[#misc][Misc]]
- [[#programming-langs][Programming langs]]
  - [[#php][PHP]]
  - [[#graphql][GraphQL]]
- [[#tools][Tools]]
  - [[#local-variables][Local variables]]
  - [[#org-mode][Org-mode]]
  - [[#projectile][Projectile]]
  - [[#company][Company]]
  - [[#format-buffer][Format buffer]]
  - [[#postman-import][Postman import]]
- [[#emacs-application-framework][Emacs Application Framework]]
- [[#work][Work]]
  - [[#malltina][Malltina]]

* Personal Configurations
** Who am I
#+begin_src emacs-lisp
(setq user-full-name "Shahin Sorkh"
      user-mail-address "sorkh.shahin@hotmail.com"
      auth-sources '("~/.authinfo.gpg"))
#+end_src
** Email accounts
*** INIT
#+begin_src conf-space :tangle ~/.mbsyncrc
# These settings can also go under an "Account" section, but then the
# "IMAPStore" section needs to reference the account. This is not
# needed for just one store per account.
Create Both
Expunge Both
SyncState *
Sync All
#+end_src
*** Gmail
#+begin_src conf-space :tangle ~/.mbsyncrc
IMAPAccount gmail
Host imap.gmail.com
User ali.zakeri2008@gmail.com
PassCmd "gpg --quiet --decrypt ~/.authinfo.gpg | awk '/machine imap.gmail.com/ {print $NF}'"
SSLType IMAPS
SSLVersion TLSv1.3 TLSv1.2
AuthMechs LOGIN

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path ~/.mail/ali.zakeri2008@gmail.com/
Inbox ~/.mail/ali.zakeri2008@gmail.com/INBOX
SubFolders Verbatim

Channel gmail-default
Far :gmail-remote:
Near :gmail-local:
Patterns INBOX

Channel gmail-gmail
Far :gmail-remote:"[Gmail]/"
Near :gmail-local:
Patterns * !INBOX !Trash !"All Mail" !Spam

Group gmail
Channel gmail-default
Channel gmail-gmail
#+end_src
#+begin_src emacs-lisp
(set-email-account! "ali.zakeri2008@gmail.com"
                    '((mu4e-sent-folder              . "/ali.zakeri2008@gmail.com/Sent Mail")
                      (mu4e-drafts-folder            . "/ali.zakeri2008@gmail.com/Drafts")
                      (mu4e-trash-folder             . "/ali.zakeri2008@gmail.com/Trash")
                      (mu4e-refile-folder            . "/ali.zakeri2008@gmail.com/All Mails")
                      (mu4e-compose-signature        . "\nBest regards,\nShSo")
                      (smtpmail-smtp-server          . "smtp.gmail.com")
                      (smtpmail-smtp-user            . "ali.zakeri2008@gmail.com")
                      (mu4e-compose-signature-auto-include nil))
                    nil)
#+end_src
*** Hotmail
#+begin_src conf-space :tangle ~/.mbsyncrc
IMAPAccount hotmail
Host outlook.office365.com
User sorkh.shahin@hotmail.com
PassCmd "gpg --quiet --decrypt ~/.authinfo.gpg | awk '/machine outlook.office365.com/ {print $NF}'"
SSLType IMAPS
SSLVersion TLSv1.3 TLSv1.2
AuthMechs LOGIN

IMAPStore outlook-remote
Account hotmail

MaildirStore outlook-local
Path ~/.mail/sorkh.shahin@hotmail.com/
Inbox ~/.mail/sorkh.shahin@hotmail.com/INBOX
SubFolders Verbatim

Channel outlook
Far :outlook-remote:
Near :outlook-local:
Patterns % !Archives !Deleted !Junk
#+end_src
#+begin_src emacs-lisp
(set-email-account! "sorkh.shahin@hotmail.com"
                    '((mu4e-sent-folder              . "/sorkh.shahin@hotmail.com/Sent")
                      (mu4e-drafts-folder            . "/sorkh.shahin@hotmail.com/Drafts")
                      (mu4e-trash-folder             . "/sorkh.shahin@hotmail.com/Deleted")
                      (mu4e-refile-folder            . "/sorkh.shahin@hotmail.com/All")
                      (mu4e-compose-signature        . "\nBest regards,\nShSo")
                      (smtpmail-smtp-server          . "smtp.office365.com")
                      (smtpmail-smtp-user            . "sorkh.shahin@hotmail.com")
                      (mu4e-compose-signature-auto-include t))
                    t)
#+end_src
* Preferences
** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 13)
      doom-unicode (font-spec :family "Vazir Mono" :size 13)
      doom-big-font (font-spec :family "JetBrains Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 14))
#+end_src
** Misc
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
(setq display-line-numbers-type 'relative)
#+end_src
* Programming langs
** PHP
Fix php file template error.
#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun doom/php-class-name ()
  (replace-regexp-in-string "\\.php$" "" (buffer-name)))
#+end_src
Add ~behat~ tests support.
#+begin_src emacs-lisp :tangle packages.el
(package! feature-mode)
#+end_src
#+begin_src emacs-lisp
(after! php
  (setq-hook! php-mode php-cs-fixer-config-option
              (concat (projectile-project-root) ".php-cs-fixer.dist.php"))
  (after! format-all
    (define-format-all-formatter php-cs-fixer
      (:executable)
      (:install "composer require --dev friendsofphp/php-cs-fixer")
      (:modes php-mode)
      (:format
       (format-all--buffer-native 'php-mode #'php-cs-fixer-fix)))))
#+end_src
** GraphQL
#+begin_src emacs-lisp :tangle packages.el
(package! graphql-mode)
#+end_src
* Tools
** Local variables
#+begin_src emacs-lisp
(setq enable-local-variables t)
(add-to-list 'safe-local-variable-values
             '(toc-org-max-depth . 4)
             '(toc-org-max-depth . 3))
#+end_src
** Org-mode
*** General
#+begin_src emacs-lisp
(setq org-directory "~/org/"
      org-passwords-file "~/.authinfo.gpg"
      org-use-property-inheritance t)
(setq deft-directory "~/org/"
      deft-recursive t)
#+end_src
*** Journal
#+begin_src emacs-lisp
(setq org-journal-date-format "%y-%m-%d"
      org-journal-file-type "org"
      org-journal-file-format "YYYYMMDD.org")
#+end_src
*** Noter
#+begin_src emacs-lisp
(setq org-noter-notes-search-path '("~/org/notes/"))
#+end_src
*** Misc
#+begin_src emacs-lisp
(after! org
  (map! :map org-mode-map
        :n "M-j" #'org-metadown
        :n "M-k" #'org-metaup))
#+end_src
** Projectile
My projects directories is typically as follows:
#+begin_example
+ code
|- localhost
|--|- {project name}
|- github.com
|--|- {github user name}
|--|--|- {github repo name}
|- gitlab.com
|--|- {gitlab repo namespace}
|--|--|- {gitlab repo name}
|- {private git server}
|--|- {repo namespace}
|--|--|- {repo name}
#+end_example
So I need a method to help =projectile= discover them all.
~my/find-directories-recursive~ is my attempt to achieve this.
#+begin_src emacs-lisp :tangle autoload.el
(defun my/is-dir (file-attrs)
  (and
   (nth 1 file-attrs)
   (not (cl-search "/.git" (nth 0 file-attrs)))))

(defun my/get-file-path (file-attrs)
  (nth 0 file-attrs))

(defun my/list-directories (directory)
  (cl-map 'list 'my/get-file-path
          (seq-filter 'my/is-dir
                      (cddr (directory-files-and-attributes directory t)))))

;;;###autoload
(defun my/find-directories-recursive (directory depth)
  "Recursively goes into `DIRECTORY' and returns all dirs found."
  (let ((found-dirs (my/list-directories directory)))
    (if (> depth 0)
        (flatten-list (merge 'list found-dirs (cl-map 'list
                                                      #'(lambda (d) (my/find-directories-recursive d (- depth 1)))
                                                      found-dirs)
                             '(lambda (&rest ...) t)))
      found-dirs)))
#+end_src
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-project-search-path (my/find-directories-recursive "~/code" 3))
  (setq projectile-auto-discover t))
#+end_src
** Company
Because I like Tabnine.
#+begin_src emacs-lisp :tangle packages.el
(when (featurep! :completion company)
  (package! company-tabnine))
#+end_src
Still struggling with ~TAB~ being trigger for =company= /and/ =yasnippet= expansion.
#+begin_src emacs-lisp
(after! company
  (setq +lsp-company-backends '(:separate company-tabnine company-capf :with company-yasnippet))
  (setq company-idle-delay 0.4)
  (setq company-tooltip-width-grow-only t)
  (setq company-show-quick-access t))
#+end_src
** Format buffer
Work around format-on-save bug.
#+begin_src emacs-lisp
(when (featurep! :editor format)
  (add-hook 'before-save-hook #'+format/buffer))
#+end_src
** Postman import
#+begin_src emacs-lisp :tangle packages.el
(package! impostman
  :recipe (:host github :repo "flashcode/impostman"))
#+end_src
* Emacs Application Framework
I don't know how to make this guy run yet!
#+begin_src emacs-lisp :tangle packages.el
;; (package! eaf
;;     :recipe (:local-repo "modules/eaf"
;;                 :files ("*.el" "core/*.el" "extension/*.el" "app/*/*.el" "*.py")))

;; (when (package! eaf :recipe (:host github
;;                              :repo "manateelazycat/emacs-application-framework"
;;                              :files ("*.el" "*.py" "app" "core")
;;                              :build (:not compile)))
;;     (package! ctable :recipe (:host github :repo "kiwanami/emacs-ctable"))
;;     (package! deferred :recipe (:host github :repo "kiwanami/emacs-deferred"))
;;     (package! epc :recipe (:host github :repo "kiwanami/emacs-epc")))

;; (use-package! eaf
;;   :commands (eaf-open-browser eaf-open find-file)
;;   :config
;;   (use-package! ctable)
;;   (use-package! deferred)
;;   (use-package! epc))
#+end_src
#+begin_src emacs-lisp
;; (after! eaf
;;     (require 'eaf-browser)
;;     (require 'eaf-image-viewer)
;;     (require 'eaf-markdown-previewer)
;;     (require 'eaf-mindmap)
;;     (require 'eaf-music-player)
;;     (require 'eaf-org-previewer)
;;     (require 'eaf-pdf-viewer)
;;     (require 'eaf-video-player))
#+end_src
* Work
** Malltina
#+begin_src conf-space :tangle ~/.mbsyncrc
IMAPAccount malltina
Host mail.malltina.com
User shahin@malltina.com
PassCmd "gpg --quiet --decrypt ~/.authinfo.gpg | awk '/machine mail.malltina.com/ {print $NF}'"
SSLType STARTTLS
CertificateFile ~/.mail/shahin@malltina.com/ca.cert

IMAPStore malltina-remote
Account malltina

MaildirStore malltina-local
Path ~/.mail/shahin@malltina.com/
Inbox ~/.mail/shahin@malltina.com/INBOX
SubFolders Verbatim

Channel malltina
Far :malltina-remote:
Near :malltina-local:
Patterns % !"Deleted Items"
#+end_src
#+begin_src emacs-lisp
(after! forge
  (add-to-list 'forge-alist '("git.malltina.com"
                              "git.malltina.com/api/v4"
                              "git.malltina.com"
                              forge-gitlab-repository)))
(set-email-account! "shahin@malltina.com"
                    '((mu4e-sent-folder              . "/shahin@malltina.com/Sent Items")
                      (mu4e-drafts-folder            . "/shahin@malltina.com/Drafts")
                      (mu4e-trash-folder             . "/shahin@malltina.com/Deleted Items")
                      (mu4e-refile-folder            . "/shahin@malltina.com/All Items")
                      (mu4e-compose-signature        . "\nBest regards,\nShSo")
                      (smtpmail-smtp-server          . "mail.malltina.com")
                      (smtpmail-smtp-user            . "shahin@malltina.com")
                      (mu4e-compose-signature-auto-include t))
                    nil)
#+end_src
