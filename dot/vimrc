" vint: -ProhibitSetNoCompatible

set t_Co=256
set cursorline
colorscheme spacegray

set encoding=utf-8
set fileencoding=utf-8
set fileformat=unix
scriptencoding utf-8

set hlsearch
set ignorecase
set incsearch
set smartcase

set splitbelow
set splitright

set autoindent
set smartindent
filetype plugin indent on
syntax enable

set hidden
set undofile
set undodir=$HOME/.vim/undo
set undolevels=1000
set undoreload=10000

set nobackup
set nocompatible
set noshowmode
set noswapfile

set number
set lazyredraw
set scrolloff=1
set signcolumn=yes
set updatetime=1250

set foldenable
set foldlevelstart=10
set foldmethod=indent
set foldnestmax=10

set wildmenu
set wildmode=full

set backspace=indent,eol,start
set pastetoggle=<f2>
nnoremap <CR> :noh<CR><CR>
let g:mapleader=','

" for ale completion issues
set completeopt=menu,menuone,preview,noselect,noinsert

augroup vimrc
  autocmd!
augroup END

"""""""""""""""""""""""""""""""""""""" Plugins configuration

" ale
let g:ale_linters_explicit = 1
let g:ale_sign_column_always = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

let g:ale_pattern_options = {
      \ '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
      \ '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
      \ }
let g:ale_list_window_size = 5

nmap <silent> <Leader>k <Plug>(ale_previous_wrap)
nmap <silent> <Leader>j <Plug>(ale_next_wrap)

let g:ale_linter_aliases = {
      \  'vue': ['vue', 'javascript', 'html', 'css'],
      \  'blade': ['php', 'javascript', 'css', 'html'],
      \  'vader': ['vim'],
      \  }

" ale completion
let g:ale_completion_enabled = 1

" ale linters
let g:ale_linters = {
      \  'vue': ['vls', 'eslint', 'stylelint'],
      \  'javascript': ['tsserver', 'eslint'],
      \  'typescript': ['tsserver', 'eslint'],
      \  'html': ['alex', 'tidy'],
      \  'text': ['alex'],
      \  'markdown': ['alex'],
      \  'json': ['jsonlint'],
      \  'css': ['stylelint'],
      \  'scss': ['stylelint'],
      \  'sass': ['stylelint'],
      \  'python': ['pylint'],
      \  'php': ['langserver', 'php'],
      \  'blade': ['langserver', 'php', 'eslint', 'stylelint'],
      \  'vim': ['vint'],
      \  'vader': ['vint'],
      \  'sh': ['language_server'],
      \  'bash': ['language_server'],
      \  'c': ['gcc'],
      \  'cpp': ['gcc'],
      \  }

" ale fixers
let g:ale_fixers = {
      \  'javascript': ['eslint'],
      \  'html': ['tidy'],
      \  'css': ['stylelint'],
      \  'vue': ['eslint', 'tidy', 'stylelint'],
      \  'json': ['jq', 'jsonlint'],
      \  'scss': ['stylelint'],
      \  'sass': ['stylelint'],
      \  'python': ['flake8'],
      \  'php': ['php-cs-fixer']
      \  }

" ale options
let g:ale_bash_language_server_use_global = 1
let g:ale_javascript_tsserver_use_global = 1
let g:ale_php_langserver_use_global = 1
let g:ale_vue_vls_use_global = 1

let g:ale_html_tidy_options = '-i -wrap 80 -omit -ashtml -utf8 --indent-cdata --indent --indent-spaces 4 --sort-attributes alpha --tab-size 4 --newline LF'

let g:ale_php_langserver_executable = $HOME.'/.config/composer/vendor/bin/php-language-server.php'

" vim vue
let g:vue_disable_pre_processors=1

autocmd vimrc FileType vue syntax sync fromstart
autocmd vimrc BufRead,BufNewFile *.vue setlocal filetype=vue

" blade
autocmd vimrc FileType blade syntax sync fromstart
autocmd vimrc BufRead,BufNewFile *.blade.php setlocal filetype=blade

" indentLine
let g:indentLine_char = '|'

" fugitive
autocmd vimrc QuickFixCmdPost *grep* cwindow

" vim-gitgutter
let g:gitgutter_diff_args = '-w'
let g:gitgutter_map_keys = 0 " overwrites tcomment objects

autocmd vimrc BufWrite * GitGutter
nnoremap <Leader>gglh :GitGutterLineHighlightsToggle<CR>

nmap ]c <Plug>GitGutterNextHunk
nmap [c <Plug>GitGutterPrevHunk

nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk
nmap <Leader>hp <Plug>GitGutterPreviewHunk

omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual

" vim-autosave
nnoremap <Leader>as :AutoSaveToggle<CR>
let g:auto_save_events = ['InsertLeave', 'TextChanged']
let g:auto_save_write_all_buffers = 1
let g:auto_save_no_updatetime = 1

" easy motion
nmap s <Plug>(easymotion-overwin-f)
nmap s <Plug>(easymotion-overwin-f2)

let g:EasyMotion_smartcase = 1

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline_powerline_fonts = 1
let g:airline_theme='simple'

" nerdtree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg)
  exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg=#ffffff guifg=#151515'
  exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('ini', 'yellow', 'none')
call NERDTreeHighlightFile('md', 'blue', 'none')
call NERDTreeHighlightFile('config', 'yellow', 'none')
call NERDTreeHighlightFile('conf', 'yellow', 'none')
call NERDTreeHighlightFile('json', 'yellow', 'none')
call NERDTreeHighlightFile('html', 'yellow', 'none')
call NERDTreeHighlightFile('py', 'cyan', 'none')
call NERDTreeHighlightFile('css', 'cyan', 'none')
call NERDTreeHighlightFile('coffee', 'Red', 'none')
call NERDTreeHighlightFile('vue', 'Red', 'none')
call NERDTreeHighlightFile('js', 'Red', 'none')
call NERDTreeHighlightFile('php', 'Magenta', 'none')

" nerdtree
autocmd vimrc StdinReadPre * let s:std_in=1

" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd vimrc VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | wincmd p | ene | exe 'NERDTree' argv()[0] | endif
autocmd vimrc BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeChDirMode = 2
let g:NERDTreeIgnore = [
      \ '\.map$',
      \ '\.pyc$',
      \]

map <C-n> :NERDTree<CR>
map <C-N> :NERDTreeToggle<CR>

" ctrl p
map <C-p> :CtrlP<CR>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.tar,*.bz,*.bz2,*.gz,*.xz,*.rar,*.phar,*.jar
set wildignore+=*/node_modules/*,*/vendor/*,*/bower_components/*,*/storage/framework/*
set wildignore+=*.pyc

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -oc --exclude-standard']
let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = '0'

" incsearch plugin
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

packadd incsearch-fuzzy.vim

function! s:config_fuzzyall(...) abort
  return extend(copy({
        \   'converters': [
        \     incsearch#config#fuzzy#converter(),
        \     incsearch#config#fuzzyspell#converter()
        \   ],
        \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> z? incsearch#go(<SID>config_fuzzyall({'command': '?'}))
noremap <silent><expr> zg? incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))

" status line
set statusline+=%#warningmsg#
set statusline+=%{fugitive#statusline()}
set statusline+=%*

if exists('#airline')
  AirlineRefresh
endif

"""""""""""""""""" my configurations

" disable IndentLines for json files
autocmd vimrc FileType json IndentLinesDisable
autocmd vimrc FileType yml,yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab

" persistent folds (https://til.hashrocket.com/posts/17c44eda91-persistent-folds-between-vim-sessions)
autocmd vimrc BufWinLeave * silent! mkview
autocmd vimrc BufWinEnter * if &filetype != '' | silent! loadview | endif

" jump to the last position when reopening a file
autocmd vimrc BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

nnoremap <space> za
nnoremap Y y$

nnoremap <Leader>ev :vsplit ~/.vimrc<cr>
nnoremap <Leader>sv :source ~/.vimrc<cr>

nnoremap gj j
nnoremap gk k
vnoremap gj j
vnoremap gk k

nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

nnoremap n nzz
nnoremap N Nzz
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

nnoremap <Leader><Leader>d :bd<cr>
nnoremap <Tab> :bn!<cr>
nnoremap <S-Tab> :bN!<cr>

nnoremap <C-J> :m+<cr>
nnoremap <C-K> :m-2<cr>

inoremap jk <esc>
inoremap <esc> <nop>

cmap w!! w !sudo tee > /dev/null % <cr> :edit!<cr>

" vim: et ts=2 sts=2 sw=2
